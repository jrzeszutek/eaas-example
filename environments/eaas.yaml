tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml

labels:
  csys-obj-type:
    values:
      - environment

inputs:
  env_type:
    description: |
      The environment's type to create
    type: string
    constraints:
      - valid_values:
          - dev-small
          - dev-large
          - production
  ttl:
    description: |
      Minutes of time to live after which the environment will be uninstalled
    type: integer
    default: 60
    constraints:
      - greater_or_equal: 0

node_templates:
  network:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, network, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, network, deployment ] }
          inputs: 
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, network, inputs ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }

  database:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, db, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, db, deployment ] }
          inputs:
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, db, inputs ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

  kubernetes:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, k8s, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, k8s, deployment ] }
          inputs:
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, k8s, inputs ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

  s3:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, s3, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, s3, deployment ] }
          inputs:
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, s3, inputs ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

  queue:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, queue, blueprint ] }
          external_resource: true
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, queue, deployment ] }
          inputs:
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, { get_input: env_type }, queue, inputs ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

  ttl:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: ttl/enable.py
          executor: central_deployment_agent
          inputs:
            ttl: { get_input: ttl }
        stop:
          implementation: ttl/disable.py
          executor: central_deployment_agent
    relationships:
      - target: queue
        type: cloudify.relationships.depends_on
      - target: s3
        type: cloudify.relationships.depends_on
      - target: kubernetes
        type: cloudify.relationships.depends_on
      - target: database
        type: cloudify.relationships.depends_on
      - target: network
        type: cloudify.relationships.depends_on


capabilities:
  k8s_endpoint:
    description: Kubernetes cluster's endpoint
    value: { get_attribute: [ kubernetes, capabilities, endpoint ] }
  k8s_config:
    description: Kubernetes cluster's config
    value: { get_attribute: [ kubernetes, capabilities, config ] }
  db_host:
    description: Database's host
    value: { get_attribute: [ database, capabilities, host ] }
  db_master_username:
    description: Database's master username
    value: { get_attribute: [ database, capabilities, master_username ] }
  db_master_password:
    description: Database's master password
    value: { get_attribute: [ database, capabilities, master_password ] }
  bucket_url:
    description: URL of S3 bucket
    value: { get_attribute: [ s3, capabilities, bucket_url ] }
